---
const links = [
   { href: "/", text: "Inicio" },
   {
      text: "Cobertura",
      dropdown: [
         { href: "/cobertura/playa-del-carmen", text: "Playa del Carmen" },
         { href: "/cobertura/tulum", text: "Tulum" },
         // { href: "/cobertura/bacalar", text: "Bacalar" },
         { href: "/cobertura/puerto-morelos", text: "Puerto Morelos" },
      ],
   },
   // {
   //   href: "/bolsaTrabajo",
   //   text: "Bolsa de trabajo",
   //   badge: "Nuevo",
   // },
   { href: "/aboutUs", text: "Nosotros" },
   // { href: "/blog", text: "Blog" },
   {
      href: "/contact",
      text: "Contacto",
      style: "gradient",
   },
];

const currentPath = Astro.url.pathname;
---

<nav
   class="fixed z-20 top-10 left-1/2 -translate-x-1/2 bg-primary border-2 rounded-3xl border-line py-3 flex items-center justify-between max-w-7xl w-[80%] md:w-[50%] gap-14 px-8 md:px-4"
>
   <div>
      <img
         src="/images/logo-enlaces-telecom.webp"
         alt="Logo Enlaces Telecom"
         class="w-19 h-13"
      />
   </div>

   <button class="md:hidden text-light" id="toggle-menu">
      <svg
         xmlns="http://www.w3.org/2000/svg"
         class="h-8 w-8"
         fill="none"
         viewBox="0 0 24 24"
         stroke="currentColor"
      >
         <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
   </button>

   <div
      id="menu-container"
      class="flex-col md:flex md:flex-row gap-4 md:gap-8 items-start md:items-center absolute md:static top-20 left-0 w-full md:w-auto bg-primary md:bg-transparent px-6 md:px-0 py-4 md:py-0 transition-all duration-300 z-50 hidden"
   >
      {
         links.map((link, index) => (
            <div class="relative group w-full md:w-auto">
               {link.dropdown ? (
                  <>
                     <button
                        type="button"
                        class="text-light px-3 font-semibold py-2 flex items-center w-full justify-between md:justify-start"
                        id="toggle-cobertura"
                     >
                        {link.text}
                        <svg
                           class="ml-1 w-4 h-4 fill-light"
                           viewBox="0 0 20 20"
                        >
                           <path d="M5.5 7.5L10 12l4.5-4.5h-9z" />
                        </svg>
                     </button>

                     <div
                        id="dropdown-cobertura"
                        class="hidden md:group-hover:block md:absolute bg-primary md:bg-white md:text-black ml-3 nd:ml-0 text-light rounded md:shadow-md z-50 w-full md:w-auto"
                     >
                        {link.dropdown.map((item) => (
                           <a
                              href={item.href}
                              class="block px-4 py-2 hover:bg-gray-200 whitespace-nowrap"
                           >
                              {item.text}
                           </a>
                        ))}
                     </div>
                  </>
               ) : (
                  <a
                     href={link.href}
                     class={`relative text-light px-3 py-2 block ${link.style === "gradient" ? "bg-[#AA681F] md:bg-linear-to-t from-golden1 to-golden3 rounded-lg text-dark" : ""}`}
                  >
                     {link.text}
                  </a>
               )}

               {!link.dropdown && currentPath === link.href ? (
                  <div class="border-b-2 border-transparent md:border-[#C69A27] mx-2" />
               ) : (
                  <div class="border-b-2 border-transparent" />
               )}
            </div>
         ))
      }
   </div>
</nav>

<script>
   const toggleMenu = document.getElementById("toggle-menu");
   const menuContainer = document.getElementById("menu-container");
   const toggleCobertura = document.getElementById("toggle-cobertura");
   const dropdownCobertura = document.getElementById("dropdown-cobertura");

   toggleMenu?.addEventListener("click", () => {
      menuContainer?.classList.toggle("hidden");
   });

   toggleCobertura?.addEventListener("click", (e) => {
      e.preventDefault();
      if (window.innerWidth < 768) {
         dropdownCobertura?.classList.toggle("hidden");
      }
   });

   const handleOutside = (event: MouseEvent) => {
      const target = event.target as Node;
      if (!menuContainer?.contains(target) && !toggleMenu?.contains(target)) {
         menuContainer?.classList.add("hidden");
      }
   };

   document.addEventListener("mousedown", handleOutside);
</script>
